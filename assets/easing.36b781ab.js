class c{constructor(t){let{x:r,y:s,width:e,height:n}=t;this.x=r,this.y=s,this.width=e,this.height=n}get top(){return this.y}get bottom(){return this.y+this.height}get left(){return this.x}get right(){return this.x+this.width}}function m(i,t){return{x:{before:Math.max(0,t.left-i.left),after:Math.max(0,i.right-t.right)},y:{before:Math.max(0,t.top-i.top),after:Math.max(0,i.bottom-t.bottom)}}}function x(i){const t=i.getBoundingClientRect(),r=getComputedStyle(i),s=r.transform;if(s){let e,n,o,a,h;if(s.startsWith("matrix3d("))e=s.slice(9,-1).split(/, /),n=+e[0],o=+e[5],a=+e[12],h=+e[13];else if(s.startsWith("matrix("))e=s.slice(7,-1).split(/, /),n=+e[0],o=+e[3],a=+e[4],h=+e[5];else return new c(t);const f=r.transformOrigin,d=t.x-a-(1-n)*parseFloat(f),g=t.y-h-(1-o)*parseFloat(f.slice(f.indexOf(" ")+1)),u=n?t.width/n:i.offsetWidth+1,l=o?t.height/o:i.offsetHeight+1;return new c({x:d,y:g,width:u,height:l})}else return new c(t)}function y(i,t,r){if(typeof i.animate>"u")return{finished:Promise.resolve()};const s=i.animate(t,r);return typeof s.finished>"u"&&(s.finished=new Promise(e=>{s.onfinish=()=>{e(s)}})),s}const p="cubic-bezier(0.4, 0, 0.2, 1)",w="cubic-bezier(0.0, 0, 0.2, 1)",b="cubic-bezier(0.4, 0, 1, 1)";export{c as B,y as a,b,w as d,m as g,x as n,p as s};
